presubmits:
  - name: pull-banka-2-backend-main-spotless
    always_run: true
    decorate: true
    spec:
      containers:
        - image: harbor.k8s.elab.rs/base-images/base:java-17-node-18-docker
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              
              THIS_SERVICE="main"
              
              # Environment ready, start test
              cd ${THIS_SERVICE}
              
              # Check formatting
              mvn spotless:check
          securityContext:
            privileged: true
          imagePullPolicy: Always
  - name: pull-banka-2-backend-main-snyk
    labels:
      preset-banka-2-snyk: "true"
    always_run: true
    decorate: true
    spec:
      containers:
        - image: harbor.k8s.elab.rs/base-images/base:java-17-node-18-docker
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              
              THIS_SERVICE="main"

              curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
              chmod +x ./snyk
              mv ./snyk /usr/local/bin/
              
              # Environment ready, start test
              cd ${THIS_SERVICE}
              
              set +e
              snyk auth $SNYK_AUTH_TOKEN
              snyk config set org=$SNYK_ORG_ID
              snyk code test . || echo "Security testing failed."
          securityContext:
            privileged: true
          imagePullPolicy: Always
  - name: pull-banka-2-backend-main-sonarqube
    labels:
      preset-github-ro-token: "true"
      preset-sonar-token: "true"
    always_run: true
    decorate: true
    spec:
      containers:
        - image: harbor.k8s.elab.rs/base-images/base:java-17-node-18-docker
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail

              SONAR_PROJECT_KEY="Banka-2-Backend-Main"
              SONAR_PROJECT_NAME="Banka-2-Backend-Main"
              SERVICES_NAMES="users otc client"
              SERVICES_PORTS="8080 8082 8083"
              THIS_SERVICE="main"

              start-docker.sh

              head_ref=$(curl -L --silent -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/RAF-SI-2022/"$REPO_NAME"/pulls/"$PULL_NUMBER" | jq -r .head.ref)
              export PULL_HEAD_REF="$head_ref"

              branch=$PULL_HEAD_REF
              curr_branch=$(git rev-parse --abbrev-ref HEAD)
              if [[ "$branch" == "$curr_branch" ]]; then
                branch="$PULL_HEAD_REF"-1
              fi
              git branch $branch
              git reset --hard HEAD~1
              git checkout $branch

              # Start all helper services
              docker network create --driver bridge bank2_net || true
              docker compose up -d --no-recreate mariadb
              docker compose up -d --no-recreate flyway
              docker compose up -d --no-recreate mongodb
              docker compose up -d --no-recreate redis
              
              # Start microservices
              services=$(echo ${SERVICES_NAMES} | xargs)
              for service in $services
              do
                docker compose up -d --build --no-recreate ${service} 
              done
              
              # Check all microservices available
              max_attempts=10
              ports=$(echo ${SERVICES_PORTS} | xargs)
              for port in $ports
              do
                counter=0
                set +e
                until curl 127.0.0.1:${port}
                do
                  ((counter++))
                  if [ $counter -ge $max_attempts ]
                  then
                    echo "Failed to ping 127.0.0.1:${port} after ${max_attempts}, exiting."
                    exit 1
                  fi
                  sleep 15
                done
                set -e
              done
              
              # Environment ready, start test
              cd ${THIS_SERVICE}

              # TODO test should not be here?
              mvn clean verify test sonar:sonar -Pcoverage \
                -Dsonar.host.url=https://sonar.k8s.elab.rs \
                -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
                -Dsonar.projectName="$SONAR_PROJECT_NAME" \
                -Dsonar.login="$SONARQUBE_TOKEN" \
                -Dsonar.pullrequest.key="$PULL_NUMBER" \
                -Dsonar.pullrequest.branch="$PULL_HEAD_REF" \
                -Dsonar.pullrequest.base="$PULL_BASE_REF" \
                -Dsonar.qualitygate.wait=true \
                -Dspring.profiles.active=local,test
          securityContext:
            privileged: true
          imagePullPolicy: Always
postsubmits:
  - name: post-banka-2-backend-main-sonarqube
    labels:
      preset-github-ro-token: "true"
      preset-sonar-token: "true"
    always_run: true
    decorate: true
    spec:
      containers:
        - image: harbor.k8s.elab.rs/base-images/base:java-17-node-18-docker
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail

              SONAR_PROJECT_KEY="Banka-2-Backend-Main"
              SONAR_PROJECT_NAME="Banka-2-Backend-Main"
              SERVICES_NAMES="users otc client"
              SERVICES_PORTS="8080 8082 8083"
              THIS_SERVICE="main"

              start-docker.sh

              # Start all helper services
              docker network create --driver bridge bank2_net || true
              docker compose up -d --no-recreate mariadb
              docker compose up -d --no-recreate flyway
              docker compose up -d --no-recreate mongodb
              docker compose up -d --no-recreate redis
              
              # Start microservices
              services=$(echo ${SERVICES_NAMES} | xargs)
              for service in $services
              do
                docker compose up -d --build --no-recreate ${service} 
              done
              
              # Check all microservices available
              max_attempts=10
              ports=$(echo ${SERVICES_PORTS} | xargs)
              for port in $ports
              do
                counter=0
                set +e
                until curl 127.0.0.1:${port}
                do
                  ((counter++))
                  if [ $counter -ge $max_attempts ]
                  then
                    echo "Failed to ping 127.0.0.1:${port} after ${max_attempts}, exiting."
                    exit 1
                  fi
                  sleep 15
                done
                set -e
              done
              
              ref=$(git rev-parse --abbrev-ref HEAD)
              
              # Environment ready, start test
              cd ${THIS_SERVICE}

              # TODO test should not be here?
              mvn clean verify test sonar:sonar -Pcoverage \
                -Dsonar.host.url=https://sonar.k8s.elab.rs \
                -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
                -Dsonar.projectName="$SONAR_PROJECT_NAME" \
                -Dsonar.login="$SONARQUBE_TOKEN" \
                -Dsonar.branch.name="$ref" \
                -Dsonar.qualitygate.wait=true \
                -Dspring.profiles.active=local,test
          securityContext:
            privileged: true
          imagePullPolicy: Always